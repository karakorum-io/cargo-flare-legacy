<?php

defined('BASEPATH') OR exit('No direct script access allowed');

/**
 * Shipper Controller
 *
 * This is the Controller for all the operations related to the shippers. From their
 * login to user accessibility etc.
 *
 * @package	CodeIgniter
 * @subpackage	Rest Server
 * @category	Controller
 * @author      Chetu
 * @link	https://www.chetu.com/
 */

class Shipper extends CI_Controller {
    
    /**
     * This is the function to load dependencies
     * 
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 10112017
     */
    function __construct() {
        parent::__construct();
        $this->load->model('shippers');
        $this->load->model('quotes');
        $this->load->model('response');
        $this->load->model('logger');
        $this->load->model('orders');
    }

    /**
     * This is index function to know the Introduction of the API and Credits
     * 
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 10112017
     */
    function index() {
        
        $request = array();
        foreach($this->input->post() as $key => $value){
            $request[$key] = $value;
        }
        /* Logging Hit */
        Logger::log($this->uri->uri_string, $this->input->ip_address() , $request, Logger::REQUEST_STATE_START, Logger::LOG_REQUEST);
              
        /* Validate API User */
        if ($this->input->post('accessKey') != $this->shippers->accessKey()) {
            
            /* Logging */
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::ACCESS_KEY
            );
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );
            
            /*  Sending JSON Response*/
            Response::sendErrorJSONResponse($response);
        }
        
        $response = array(
            'title' => 'FreightDragon-API-1.0.0',
            'author' => 'Chetu Inc.',
            'link' => 'https://www.chetu.com/'
        );
        
        Logger::log(
                $this->uri->uri_string,
                $this->input->ip_address() ,
                $response,
                Logger::REQUEST_STATE_ENDED,
                Logger::LOG_RESPONSE
        );
        Response::sendSuccessJSONResponse(Response::MSG200, $response);
    }

    /**
     * This function / action is for shippers to login.
     * 
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 10112017
     */
    function login() {
        
        $request = array();
        foreach($this->input->post() as $key => $value){
            $request[$key] = $value;
        }
        /* Logging Hit */
        Logger::log($this->uri->uri_string, $this->input->ip_address() , $request, Logger::REQUEST_STATE_START, Logger::LOG_REQUEST);
        
        /* Validate API User */
        if ($this->input->post('accessKey') != $this->shippers->accessKey()) {
            
            /* Logging */
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::ACCESS_KEY
            );
            Logger::log(
                $this->uri->uri_string,
                $this->input->ip_address() ,
                $response,
                Logger::REQUEST_STATE_ENDED,
                Logger::LOG_RESPONSE
            );
            
            /* Sending JSON Response*/
            Response::sendErrorJSONResponse($response);           
        }
        
        $email = $this->input->post('email');
        $password = $this->input->post('password');
        $accountId = $this->input->post('id');
        
        if (empty($email) || empty($password) || empty($accountId)) {
            
            /* Logging */
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::MSG400
            );
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ONGOING,
                    Logger::LOG_RESPONSE
            );
            
            /* sending JSON Response*/
            Response::sendErrorJSONResponse($response);            
        }
        
        /* Not trusting User inputs */
        $email = addslashes($email);
        $password = addslashes($password);
        $password = md5($password);

        /* checking in database for existance */
        $result = $this->shippers->select(
                "app_accounts", array(
                'email' => $email,
                "password" => $password,
                "id" => $accountId
                )
        );

        if (count($result) > 0) {

            /* destroy previous session if any */
            
            $loginStatusData = $this->shippers->select(
                    "api_keys", array(
                    "user_id" => $result[0]['id']
                    )
            );
            
            if (count($loginStatusData) > 0) {
                $this->logout($loginStatusData[0]['key']);
            }
            
            /* Successfull Login */
            $userData = array(
                'id' => $result[0]['id']
            );

            $id = $result[0]['id'];
            $email = $result[0]['email'];

            /* Generating API Key / Token */
            $apikey = md5($id . $email . time());

            $data = array(
                'key' => $apikey,
                'user_id' => $id,
            );
            
            /* maintaining keys in database */
            $this->shippers->insert('api_keys', $data);

            /* Login log report */
            $this->loginReport($userData);
            
            $response = array(
                'apikey' => $apikey,
                'userData' => $result
            );
            
            Logger::log(
               $this->uri->uri_string,
               $this->input->ip_address() ,
               $response,
               Logger::REQUEST_STATE_ENDED,
               Logger::LOG_RESPONSE
           );
            
            Response::sendSuccessJSONResponse(Response::MSG200, $response);
        } else {
            
            /* Logging */
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::MSG400
            );
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );
            
            /* Login Failure */
            Response::sendErrorJSONResponse($response);
        }
    }

    /**
     * This function / action is for shippers to logout.
     * 
     * @param String $key after login access token
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 10112017
     */
    function logout($key=NULL) {       
       
        if($key == NULL){
            $apiKey = $this->input->post('apikey');            
            $request = array();
            foreach($this->input->post() as $key => $value){
                $request[$key] = $value;
            }
            /* Logging Hit */
            Logger::log($this->uri->uri_string, $this->input->ip_address() , $request, Logger::REQUEST_STATE_START, Logger::LOG_REQUEST);
            
        } else {
            $apiKey = $key;
        }
        
        if (empty($apiKey)) {
            
            /* Logging */
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::MSG400
            );
            
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );
            
            Response::sendErrorJSONResponse($response);
        }

        /* Validating API Key */
        if ($this->shippers->checkLogin($apiKey)) {

            /* Maintaing Logout Log */
            $this->logoutReport($apiKey);

            /* Destroying APi Key */
            if (!empty($apiKey)) {
                $this->shippers->delete("api_keys", $apiKey);
            }
            
            /* Returning response */
            if(empty($key)){
                
            } else {
                
                $response = array(
                    'response' => "USER LOGGED OUT"
                );
                
                Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
                );
                 Response::sendSuccessJSONResponse(Response::MSG200, $response);                
            }            
        } else {
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::MSG400
            );
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );
            
            Response::sendErrorJSONResponse($response);
        }
    }

    /**
     * This function / action is for shippers to change password
     * 
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 08122017
     */
    function changePassword() {
        
        $apiKey = $this->input->post('apikey');
        $request = array();
        foreach ($this->input->post() as $key => $value) {
            $request[$key] = $value;
        }
        /* Logging Hit */
        Logger::log($this->uri->uri_string, $this->input->ip_address() , $request, Logger::REQUEST_STATE_START, Logger::LOG_REQUEST);
        
        $apiKey = $this->input->post('apikey');

        if (empty($apiKey)) {
             /* Logging */
            $response = array(
                "status" => Response::STATUS_FAILURE,
                "error" => Response::MSG400
            );

            Logger::log(
                    $this->uri->uri_string, $this->input->ip_address(), $response, Logger::REQUEST_STATE_ENDED, Logger::LOG_RESPONSE
            );

            Response::sendErrorJSONResponse($response);
        }
        /* Validating API Key */
        if ($this->shippers->checkLogin($apiKey)) {

            $old = md5($this->input->post('old_password'));
            $new = md5($this->input->post('new_password'));

            $shipperId = $this->shippers->getUserId($apiKey);

            /* check old password */
            $result = $this->shippers->select(
                    "app_accounts", array(
                    'id' => $shipperId
                    )
            );

            if ($result[0]['password'] == $old) {

                $this->shippers->update(
                        'app_accounts', 'id', $shipperId, array('password' => $new
                ));

                $response = array(
                    'response' => "USER PASSWORD CHANGED"
                );
                Logger::log(
                        $this->uri->uri_string, $this->input->ip_address(), $response, Logger::REQUEST_STATE_ENDED, Logger::LOG_RESPONSE
                );
                Response::sendSuccessJSONResponse(Response::MSG200, $response);
                
            } else {
                /* Logging */
                $response = array(
                    "status" => Response::STATUS_FAILURE,
                    "error" => Response::MSG400
                );

                Logger::log(
                        $this->uri->uri_string, $this->input->ip_address(), $response, Logger::REQUEST_STATE_ENDED, Logger::LOG_RESPONSE
                );

                Response::sendErrorJSONResponse($response);
            }
        } else {
            /* Logging */
            $response = array(
                "status" => Response::STATUS_FAILURE,
                "error" => Response::MSG400
            );

            Logger::log(
                    $this->uri->uri_string, $this->input->ip_address(), $response, Logger::REQUEST_STATE_ENDED, Logger::LOG_RESPONSE
            );

            Response::sendErrorJSONResponse($response);
        }
    }

    /**
     * This function / action to Send the Dashboard Data to the user after login
     * 
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 16112017
     */
    function dashboard() {

        $apiKey = $this->input->post('apikey');

        if ($this->shippers->checkLogin($apiKey)) {

            /* Update Last Hit for User */
            $this->updateLastHit($apiKey);

            /* Gathering Dashboard Data */
            $userId = $this->shippers->getUserId($apiKey);

            header("HTTP/1.1 200 OK");
            echo json_encode(
                    array(
                        'status' => 'SUCCESS',
                        'message' => 'INPROGRESS',
                        'user_id' => $userId
                    )
            );
            return;
        } else {
            Response::sendErrorJSONResponse(Response::TOKEN_ERROR);
        }
    }

    /**
     * This function / action for requesting a quote from customer portal
     * 
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 29112017
     */
    function requestQuotes() {

        /* obtaining api key */
        $apiKey = $this->input->post('apikey');

        if ($this->shippers->checkLogin($apiKey)) {

            /* Update Last Hit for User */
            $this->updateLastHit($apiKey);

            /* getting request parameters */
            $origin_city = $this->input->post('origin_city');
            $origin_state = $this->input->post('origin_state');
            $origin_zip = $this->input->post('origin_zip');
            $origin_country = $this->input->post('origin_country');
            $destination_city = $this->input->post('destination_city');
            $destination_state = $this->input->post('destination_state');
            $destination_zip = $this->input->post('destination_zip');
            $destination_country = $this->input->post('destination_country');
            $numVehicles = $this->input->post('vehicles');
            $shipping_est_date = $this->input->post('shipping_est_date');
            $shipping_ship_via = $this->input->post('shipping_ship_via');
            $shipping_notes = $this->input->post('shipping_notes');
            $send_mail = $this->input->post('send_mail');

            /* fetching shipper data */
            $shipperId = $this->shippers->getUserId($apiKey);
            $result = $this->shippers->select(
                    "app_accounts", array(
                'id' => $shipperId
                    )
            );

            /* getting shipper data */
            $shipperOwnerId = $result[0]['owner_id'];
            $shipperMemberId = $result[0]['member_id'];

            /* getting membes id */
            //$this->members->getMemberId();

            $quote = array(
                'type' => '1',
                'quoted' => date('Y-m-d H:i:s'),
                'received' => date('Y-m-d H:i:s'),
                'creator_id' => "",
                'assigned_id' => "",
                'parentid' => $shipperOwnerId,
                'salesrepid' => '',
                'est_ship_date' => date("Y-m-d", strtotime($shipping_est_date)),
                'status' => Quotes::STATUS,
                'ship_via' => $shipping_ship_via,
                'information' => $shipping_notes,
                'referred_by' => Quotes::REFFERED_BY,
                'referred_id' => Quotes::REFFERED_ID
            );

            /* starting database transaction */
            $this->db->trans_start();

            /* creating new quotes */
            try {
                $entity_id = $this->quotes->createQuote($quote);
            } catch (Exception $e) {
                /* log exception */
                print_r($e);
            }

            /* gathering origin */
            $origin = array(
                'city' => $origin_city,
                'state' => $origin_state,
                'zip' => $origin_zip,
                'country' => $origin_country
            );

            /* gathering destination */
            $destination = array(
                'city' => $destination_city,
                'state' => $destination_state,
                'zip' => $destination_zip,
                'country' => $destination_country
            );

            /* getting vehicle data */
            $vehicles = array();

            for ($i = 0; $i < $numVehicles; $i++) {
                $vehicles[$i]['entity_id'] = $entity_id;
                $vehicles[$i]['year'] = $this->input->post('year' . $i);
                $vehicles[$i]['make'] = $this->input->post('make' . $i);
                $vehicles[$i]['model'] = $this->input->post('model' . $i);
                $vehicles[$i]['type'] = $this->input->post('type' . $i);
                $vehicles[$i]['inop'] = $this->input->post('inop' . $i);
            }

            $shipper = array(
                'fname' => $result[0]['first_name'],
                'lname' => $result[0]['last_name'],
                'email' => $result[0]['email'],
                'company' => $result[0]['company_name'],
                'phone1' => str_replace("-", "", $result[0]['phone1']),
                'phone2' => str_replace("-", "", $result[0]['phone2']),
                'mobile' => str_replace("-", "", $result[0]['cell']),
                'fax' => $result[0]['fax'],
                'address1' => $result[0]['address1'],
                'address2' => $result[0]['address2'],
                'city' => $result[0]['city'],
                'state' => $result[0]['state'],
                'zip' => $result[0]['zip_code'],
                'country' => $result[0]['country'],
                'shipper_type' => $result[0]['shipper_type'],
                'shipper_hours' => $result[0]['hours_of_operation']
            );

            /* gathering follow up informartion */
            $days = $this->quotes->getFirstFollowUp($shipperOwnerId);

            $followUp = array(
                'type' => 0,
                'created' => date('Y-m-d h:i:s'),
                'followup' => date("Y-m-d", mktime(0, 0, 0, (int) date("m"), (int) date("d") + $days, (int) date("Y"))),
                'entity_id' => $entity_id,
                'sender_id' => $shipperMemberId ? "" : 0
            );

            /* gathering notes */
            $notes = array(
                'entity_id' => $entity_id,
                'type' => 2,
                'text' => $shipping_notes
            );

            try {

                /* inserting shipper in app_ahippers */
                $insertedShipperId = $this->quotes->createShipper($shipper);
                /* inserting shipper in origin */
                $insertedOriginId = $this->quotes->createOrigin($origin);
                /* inserting shipper in destination */
                $insertedDestinationId = $this->quotes->createDestination($destination);
                /* inserting shipper in vehicles */
                $insertedVehicleId = $this->quotes->createVehicle($vehicles);

                /* updating entities table */

                $hash = $this->quotes->findFreeHash();

                $update_entity = array(
                    'shipper_id' => $insertedShipperId,
                    'origin_id' => $insertedOriginId,
                    'destination_id' => $insertedDestinationId,
                    'distance' => 'NULL',
                    'hash' => $hash
                );
                $result = $this->quotes->updateEntity($update_entity, $entity_id);

                /* inserting follow up data */
                $insertedFollowUpId = $this->quotes->craeteFollowUp($followUp);

                /* inserting notes */
                $this->quotes->createNotes($notes);

                /* send email trigger */
                if ($send_mail == 1) {
                    
                }

                /* insert into app_order_header */
                $this->quotes->copyInOrderHeader($entity_id);

                /* commiting dataabse transaction */
                if ($this->db->trans_status() === FALSE) {
                    $this->db->trans_rollback();
                } else {
                    $this->db->trans_commit();
                }

                Response::sendSuccessJSONResponse(Response::QUOTE_REQUEST);
            } catch (Exception $e) {
                /* log exception */
                print_r($e);
            }
        } else {
            Response::sendErrorJSONResponse(Response::MSG400);
        }
    }

    /**
     * This function / action login log when User logs in Successfully
     * 
     * @param Array $userData User information array
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 16112017
     */
    function loginReport($userData) {

        /* Adding Log for Logged In User */
        $log = array(
            'user_id' => $userData['id'],
            'ip'=> $_SERVER['REMOTE_ADDR']
        );
        $this->shippers->insert('api_login_logout_report', $log);
    }

    /**
     * This function / action login log when User logs in Successfully
     * 
     * @param String $apiKey The aPI key which is confidential in development teams
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 16112017
     */
    function logoutReport($apiKey) {

        $userId = $this->shippers->getUserId($apiKey);
        $this->shippers->update(
                'api_login_logout_report', 'user_id', $userId, array('logout_at' => date('Y-m-d H:i:s'))
        );
    }

    /**
     * This function updates last hit in the database on the basis of user id
     * 
     * @param String $apiKey The aPI key which is confidential in development teams
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 16112017
     */    
    function updateLastHit($apiKey) {

        $userId = $this->shippers->getUserId($apiKey);
        $this->shippers->update(
                'api_login_logout_report', 'user_id', $userId, array('last_hit_at' => date('Y-m-d H:i:s'))
        );
    }

    /**
     * This function fetches 
     * 
     * @author      Chetu
     * @output      JSON response
     * @lastUpdated 16112017
     */    
    function getLoginLogouReports() {

        $limit1 = $this->input->post('limit1');
        $limit2 = $this->input->post('limit2');
        
        if(!empty($limit1) || !empty($limit2)){            
            $result = $this->shippers->selectAllWithLimits('api_login_logout_report', $limit1, $limit2);
            Response::sendSuccessJSONResponse(Response::MSG200, $result);
        } else {
            Response::sendErrorJSONResponse(Response::MSG400);
        }
    }
    
    /**
    * Function to send the order listing data to the customer portal client as a
    * JSON response
    * 
    * @author Chetu Inc.
    * @version 1.0
    * @return JSON API response
    */
    function getOrders(){
        
        $request = array();
        foreach($this->input->post() as $key => $value){
            $request[$key] = $value;
        }
        /* Logging Hit */
        Logger::log($this->uri->uri_string, $this->input->ip_address() , $request, Logger::REQUEST_STATE_START, Logger::LOG_REQUEST);
        
        /* Listing Limits */
        $from = $this->input->post('from');
        $to = $this->input->post('to');
        $apiKey = $this->input->post('apikey');
        $status = $this->input->post('status');
        
        /* Vallidate mandatory parameters */
        $this->act_on_empty($to);
        $this->act_on_empty($apiKey);
        $this->act_on_empty($status);
        
        /* Validating Limits*/
        if( ( $from < 0 ) || ( $to > $this->config->item('paginated_page_max_list_item') ) ){
                /* Loggin Error*/
                $response = array(
                    "status"=> Response::STATUS_FAILURE,
                    "error"=> Response::INVALID_PAGINATION
                );
                /* Sending error response*/
                Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
                );            
                Response::sendErrorJSONResponse($response);
        }
        
       if ($this->shippers->checkLogin($apiKey)) {

            /* Update Last Hit for User */
            $this->updateLastHit($apiKey);
            
            /* validate order status */
            if( !in_array( $status, Orders::STATUS ) ) {
                $response = array(
                    "status"=> Response::STATUS_FAILURE,
                    "error"=> Response::MSG400
                );
                Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
                );            
                Response::sendErrorJSONResponse($response);
            } else {
                /* Gathering order listing */            
                $orderList = $this->orders->getOrderList(
                    $this->shippers->getUserId($apiKey),
                    $status,
                    $from,
                    $to
                );
                
                $response = array(
                    'apikey' => $apiKey,
                    'orderList' => $orderList,
                    'all_records' => $this->orders->get_orders_count(
                                $this->shippers->getUserId($apiKey),
                                $status
                    )
                );

                Logger::log(
                   $this->uri->uri_string,
                   $this->input->ip_address() ,
                   $response,
                   Logger::REQUEST_STATE_ENDED,
                   Logger::LOG_RESPONSE
               );
                Response::sendSuccessJSONResponse(Response::MSG200, $response);
            }
            
        } else {
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::TOKEN_ERROR
            );
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );            
            Response::sendErrorJSONResponse($response);
        }
        
    }
    
    /**
     * API index to return the Quotes listing on the basis of Status sent
     * 
     * @author Chetu Inc.
     * @version 1.0
     * @return JSON API Response
     */
    function getQuotes(){
        $request = array();
        foreach($this->input->post() as $key => $value){
            $request[$key] = $value;
        }
        /* Logging Hit */
        Logger::log($this->uri->uri_string, $this->input->ip_address() , $request, Logger::REQUEST_STATE_START, Logger::LOG_REQUEST);

        /* Listing Limits */
        $from = $this->input->post('from');
        $to = $this->input->post('to');
        $apiKey = $this->input->post('apikey');
        $status = $this->input->post('status');
        
        /* Vallidate mandatory parameters */
        $this->act_on_empty($to);
        $this->act_on_empty($apiKey);
        $this->act_on_empty($status);
        
        /* Validating Limits*/
        if( ( $from < 0 ) || ( $to > $this->config->item('paginated_page_max_list_item') ) ){
                /* Loggin Error*/
                $response = array(
                    "status"=> Response::STATUS_FAILURE,
                    "error"=> Response::INVALID_PAGINATION
                );
                /* Sending error response*/
                Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
                );            
                Response::sendErrorJSONResponse($response);
        }
        
        if ($this->shippers->checkLogin($apiKey)) {

            /* Update Last Hit for User */
            $this->updateLastHit($apiKey);
            
            
            /* Gathering quotes listing */            
            $quotesList = $this->quotes->getQuotesList(
                $this->shippers->getUserId($apiKey),
                $status,
                $from,
                $to
            );

            $response = array(
                'apikey' => $apiKey,
                'quotesList' => $quotesList,
                'all_records' => $this->quotes->get_quotes_count(
                        $this->shippers->getUserId($apiKey),
                        $status
                )
            );

            Logger::log(
               $this->uri->uri_string,
               $this->input->ip_address() ,
               $response,
               Logger::REQUEST_STATE_ENDED,
               Logger::LOG_RESPONSE
           );
           Response::sendSuccessJSONResponse(Response::MSG200, $response);
           
            
        } else {
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::TOKEN_ERROR
            );
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );
            Response::sendErrorJSONResponse($response);
        }
    }
    
     /**
     * This function / action to get the order details Data to the user 
     * 
     * @author      Chetu
     * @version 1.0
     * @return JSON API response
     */
    function orderDetail() {
        
        $apiKey = $this->input->post('apikey');
        $entity_id = $this->input->post('entity_id');
        
        /* Update Last Hit for User */
        $this->updateLastHit($apiKey);
        
        $request = array();
        foreach ($this->input->post() as $key => $value) {
            $request[$key] = $value;
        }
        
        /* Logging Hit */
        Logger::log(
            $this->uri->uri_string,
            $this->input->ip_address(),
            $request,
            Logger::REQUEST_STATE_START,
            Logger::LOG_REQUEST
        );
        
        /* Checking empty API Key  and Entity Id*/
        if (empty($apiKey) || empty($entity_id)) {
            
            /* Logging */
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::MSG400
            );
            
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );
            
            Response::sendErrorJSONResponse($response);
        }
        
        /* Validating API Key */
        if ($this->shippers->checkLogin($apiKey)) {
            
            $account_id = $this->shippers->getUserId($apiKey);
            $order_details = $this->orders->getOrderData($entity_id,$account_id);
            
            $response = array(
                'apikey' => $apiKey,
                'order_details' => $order_details
            );
            
            Logger::log(
               $this->uri->uri_string,
               $this->input->ip_address() ,
               $response,
               Logger::REQUEST_STATE_ENDED,
               Logger::LOG_RESPONSE
           );
           Response::sendSuccessJSONResponse(Response::MSG200, $response);
            
        } else {
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::TOKEN_ERROR
            );
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );
            
            Response::sendErrorJSONResponse($response);
        }
        
    }
    
    /**
     * Function / action to get the quotes details data to the user
     * 
     * @author Chetu Inc.
     * @version 1.0
     * @return JSON API response
     */
    function quoteDetail(){
        
        $apiKey = $this->input->post('apikey');
        $entity_id = $this->input->post('entity_id');
        
        /* Update Last Hit for User */
        $this->updateLastHit($apiKey);
        
        $request = array();
        foreach ($this->input->post() as $key => $value) {
            $request[$key] = $value;
        }
        
        /* Logging Hit */
        Logger::log(
            $this->uri->uri_string,
            $this->input->ip_address(),
            $request,
            Logger::REQUEST_STATE_START,
            Logger::LOG_REQUEST
        );
        
        /* Checking empty API Key  and Entity Id*/
        if (empty($apiKey) || empty($entity_id)) {
            
            /* Logging */
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::MSG400
            );
            
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );
            
            Response::sendErrorJSONResponse($response);
        }
        
        /* Validating API Key */
        if ($this->shippers->checkLogin($apiKey)) {
            
            $account_id = $this->shippers->getUserId($apiKey);
            $quotes_details = $this->quotes->getQuoteData($entity_id,$account_id);
            
            $response = array(
                'apikey' => $apiKey,
                'quotes_details' => $quotes_details
            );
            
            Logger::log(
               $this->uri->uri_string,
               $this->input->ip_address() ,
               $response,
               Logger::REQUEST_STATE_ENDED,
               Logger::LOG_RESPONSE
           );
           Response::sendSuccessJSONResponse(Response::MSG200, $response);
            
        } else {
            $response = array(
                "status"=> Response::STATUS_FAILURE,
                "error"=> Response::TOKEN_ERROR
            );
            Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
            );
            
            Response::sendErrorJSONResponse($response);
        }
        
    }
    
    /**
     * Function to check empty and non set variables and return corresponding JSON response.
     * 
     * @param ANY $variable
     * @return void
     */
    private function act_on_empty($variable){
        if( (!isset($variable)) || empty($variable) ){
            /* Loggin Error*/
                $response = array(
                    "status"=> Response::STATUS_FAILURE,
                    "error"=> Response::MANDATORY_FIELDS_EMPTY
                );
                /* Sending error response*/
                Logger::log(
                    $this->uri->uri_string,
                    $this->input->ip_address() ,
                    $response,
                    Logger::REQUEST_STATE_ENDED,
                    Logger::LOG_RESPONSE
                );
                Response::sendErrorJSONResponse($response);
        }
    }

}
